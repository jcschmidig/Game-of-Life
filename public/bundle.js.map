{"version":3,"file":"bundle.js","sources":["../node_modules/svelte/internal/index.mjs","../src/common/Util.html","../src/common/Button.html","../src/Start.html","../src/Field.html","../src/common/Measure.html","../src/Game.html","../src/Board.html","../src/App.html","../src/main.js"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\nfunction is_promise(value) {\n    return value && typeof value === 'object' && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction validate_store(store, name) {\n    if (!store || typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, callback) {\n    const unsub = store.subscribe(callback);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, fn) {\n    return definition[1]\n        ? assign({}, assign(ctx.$$scope.ctx, definition[1](fn ? fn(ctx) : {})))\n        : ctx.$$scope.ctx;\n}\nfunction get_slot_changes(definition, ctx, changed, fn) {\n    return definition[1]\n        ? assign({}, assign(ctx.$$scope.changed || {}, definition[1](fn ? fn(changed) : {})))\n        : ctx.$$scope.changed || {};\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nlet running = false;\nfunction run_tasks() {\n    tasks.forEach(task => {\n        if (!task[0](now())) {\n            tasks.delete(task);\n            task[1]();\n        }\n    });\n    running = tasks.size > 0;\n    if (running)\n        raf(run_tasks);\n}\nfunction clear_loops() {\n    // for testing...\n    tasks.forEach(task => tasks.delete(task));\n    running = false;\n}\nfunction loop(fn) {\n    let task;\n    if (!running) {\n        running = true;\n        raf(run_tasks);\n    }\n    return {\n        promise: new Promise(fulfil => {\n            tasks.add(task = [fn, fulfil]);\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction detach(node) {\n    node.parentNode.removeChild(node);\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    // eslint-disable-next-line @typescript-eslint/no-object-literal-type-assertion\n    const target = {};\n    for (const k in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    for (const key in attributes) {\n        if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key in node) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group) {\n    const value = [];\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.push(group[i].__value);\n    }\n    return value;\n}\nfunction to_number(value) {\n    return value === '' ? undefined : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction claim_element(nodes, name, attributes, svg) {\n    for (let i = 0; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeName === name) {\n            for (let j = 0; j < node.attributes.length; j += 1) {\n                const attribute = node.attributes[j];\n                if (!attributes[attribute.name])\n                    node.removeAttribute(attribute.name);\n            }\n            return nodes.splice(i, 1)[0]; // TODO strip unwanted attributes\n        }\n    }\n    return svg ? svg_element(name) : element(name);\n}\nfunction claim_text(nodes, data) {\n    for (let i = 0; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 3) {\n            node.data = data;\n            return nodes.splice(i, 1)[0];\n        }\n    }\n    return text(data);\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.data !== data)\n        text.data = data;\n}\nfunction set_input_value(input, value) {\n    if (value != null || input.value) {\n        input.value = value;\n    }\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    node.style.setProperty(key, value, important ? 'important' : '');\n}\nfunction select_option(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked') || select.options[0];\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\nfunction add_resize_listener(element, fn) {\n    if (getComputedStyle(element).position === 'static') {\n        element.style.position = 'relative';\n    }\n    const object = document.createElement('object');\n    object.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; height: 100%; width: 100%; overflow: hidden; pointer-events: none; z-index: -1;');\n    object.type = 'text/html';\n    object.tabIndex = -1;\n    let win;\n    object.onload = () => {\n        win = object.contentDocument.defaultView;\n        win.addEventListener('resize', fn);\n    };\n    if (/Trident/.test(navigator.userAgent)) {\n        element.appendChild(object);\n        object.data = 'about:blank';\n    }\n    else {\n        object.data = 'about:blank';\n        element.appendChild(object);\n    }\n    return {\n        cancel: () => {\n            win && win.removeEventListener && win.removeEventListener('resize', fn);\n            element.removeChild(object);\n        }\n    };\n}\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, false, false, detail);\n    return e;\n}\nclass HtmlTag {\n    constructor(html, anchor = null) {\n        this.e = element('div');\n        this.a = anchor;\n        this.u(html);\n    }\n    m(target, anchor = null) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(target, this.n[i], anchor);\n        }\n        this.t = target;\n    }\n    u(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.childNodes);\n    }\n    p(html) {\n        this.d();\n        this.u(html);\n        this.m(this.t, this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\n\nlet stylesheet;\nlet active = 0;\nlet current_rules = {};\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    if (!current_rules[name]) {\n        if (!stylesheet) {\n            const style = element('style');\n            document.head.appendChild(style);\n            stylesheet = style.sheet;\n        }\n        current_rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ``}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    node.style.animation = (node.style.animation || '')\n        .split(', ')\n        .filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    )\n        .join(', ');\n    if (name && !--active)\n        clear_rules();\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        let i = stylesheet.cssRules.length;\n        while (i--)\n            stylesheet.deleteRule(i);\n        current_rules = {};\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error(`Function called outside component initialization`);\n    return current_component;\n}\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\nfunction createEventDispatcher() {\n    const component = current_component;\n    return (type, detail) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail);\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n        }\n    };\n}\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n}\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        callbacks.slice().forEach(fn => fn(event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nconst render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\nfunction flush() {\n    const seen_callbacks = new Set();\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        while (dirty_components.length) {\n            const component = dirty_components.shift();\n            set_current_component(component);\n            update(component.$$);\n        }\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                callback();\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n}\nfunction update($$) {\n    if ($$.fragment) {\n        $$.update($$.dirty);\n        run_all($$.before_update);\n        $$.fragment.p($$.dirty, $$.ctx);\n        $$.dirty = null;\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config();\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config();\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    let config = fn(node, params);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = program.b - t;\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config();\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = key && { [key]: value };\n        const child_ctx = assign(assign({}, info.ctx), info.resolved);\n        const block = type && (info.current = type)(child_ctx);\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            info.blocks[i] = null;\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            flush();\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = { [info.value]: promise };\n    }\n}\n\nconst globals = (typeof window !== 'undefined' ? window : global);\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, changed, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            block.p(changed, child_ctx);\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    return new_blocks;\n}\nfunction measure(blocks) {\n    const rects = {};\n    let i = blocks.length;\n    while (i--)\n        rects[blocks[i].key] = blocks[i].node.getBoundingClientRect();\n    return rects;\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args) {\n    const attributes = Object.assign({}, ...args);\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === undefined)\n            return;\n        if (value === true)\n            str += \" \" + name;\n        const escaped = String(value)\n            .replace(/\"/g, '&#34;')\n            .replace(/'/g, '&#39;');\n        str += \" \" + name + \"=\" + JSON.stringify(escaped);\n    });\n    return str;\n}\nconst escaped = {\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;'\n};\nfunction escape(html) {\n    return String(html).replace(/[\"'&<>]/g, match => escaped[match]);\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(parent_component ? parent_component.$$.context : []),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, options = {}) => {\n            on_destroy = [];\n            const result = { head: '', css: new Set() };\n            const html = $$render(result, props, {}, options);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    return ` ${name}${value === true ? '' : `=${typeof value === 'string' ? JSON.stringify(escape(value)) : `\"${value}\"`}`}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : ``;\n}\n\nfunction bind(component, name, callback) {\n    if (component.$$.props.indexOf(name) === -1)\n        return;\n    component.$$.bound[name] = callback;\n    callback(component.$$.ctx[name]);\n}\nfunction mount_component(component, target, anchor) {\n    const { fragment, on_mount, on_destroy, after_update } = component.$$;\n    fragment.m(target, anchor);\n    // onMount happens before the initial afterUpdate\n    add_render_callback(() => {\n        const new_on_destroy = on_mount.map(run).filter(is_function);\n        if (on_destroy) {\n            on_destroy.push(...new_on_destroy);\n        }\n        else {\n            // Edge case - component was destroyed immediately,\n            // most likely as a result of a binding initialising\n            run_all(new_on_destroy);\n        }\n        component.$$.on_mount = [];\n    });\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    if (component.$$.fragment) {\n        run_all(component.$$.on_destroy);\n        component.$$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        component.$$.on_destroy = component.$$.fragment = null;\n        component.$$.ctx = {};\n    }\n}\nfunction make_dirty(component, key) {\n    if (!component.$$.dirty) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty = blank_object();\n    }\n    component.$$.dirty[key] = true;\n}\nfunction init(component, options, instance, create_fragment, not_equal, prop_names) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const props = options.props || {};\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: null,\n        // state\n        props: prop_names,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(parent_component ? parent_component.$$.context : []),\n        // everything else\n        callbacks: blank_object(),\n        dirty: null\n    };\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, props, (key, value) => {\n            if ($$.ctx && not_equal($$.ctx[key], $$.ctx[key] = value)) {\n                if ($$.bound[key])\n                    $$.bound[key](value);\n                if (ready)\n                    make_dirty(component, key);\n            }\n        })\n        : props;\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    $$.fragment = create_fragment($$.ctx);\n    if (options.target) {\n        if (options.hydrate) {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment.l(children(options.target));\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor);\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement !== 'undefined') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set() {\n            // overridden by instance, if it has props\n        }\n    };\n}\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set() {\n        // overridden by instance, if it has props\n    }\n}\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(`'target' is a required option`);\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn(`Component was already destroyed`); // eslint-disable-line no-console\n        };\n    }\n}\n\nexport { HtmlTag, SvelteComponent, SvelteComponentDev, SvelteElement, add_attribute, add_classes, add_flush_callback, add_location, add_render_callback, add_resize_listener, add_transform, afterUpdate, append, assign, attr, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_element, claim_text, clear_loops, component_subscribe, createEventDispatcher, create_animation, create_bidirectional_transition, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, debug, destroy_block, destroy_component, destroy_each, detach, dirty_components, each, element, element_is, empty, escape, escaped, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, getContext, get_binding_group_value, get_current_component, get_slot_changes, get_slot_context, get_spread_update, get_store_value, globals, group_outros, handle_promise, identity, init, insert, intros, invalid_attribute_name_character, is_client, is_function, is_promise, listen, loop, measure, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, raf, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_data, set_input_type, set_input_value, set_now, set_raf, set_style, space, spread, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, update_keyed_each, validate_component, validate_store, xlink_attr };\n","<script context=\"module\">\n    import { tick } from 'svelte'\n    //\n    /***  Component Interface ***/\n    export const\n        counter = (obj, reducer) => obj.reduce( reducer, 0 ),\n        //\n        call = (verb, ...prop) => obj => obj[verb](...prop),\n        //\n        setFocus = async element => void(\n            await tick(), document.getElementById(element).focus() ),\n        //\n        blank = value => value || \"\",\n        //\n        checkMinMax = (value, min, max, valueMin = min, valueMax = max) =>\n            value<min ? valueMin : value>max ? valueMax : value\n    //\n</script>\n","<button id={id} style={_buttonStyle} {disabled} on:click>{name}</button>\n\n<style>\n\tbutton:focus { border-color: green; border-width: 2px; }\n    button[disabled] {\n        border: none;\n        background-color: lightgray;\n        cursor: not-allowed !important; }\n</style>\n\n<script>\n    /*** Default Component Interface ***/\n    export let\n        id=\"\", name=\"Submit\",\n        width=\"\", height=\"\",\n        style=\"\", disabled=\"\"\n\n    /*** Observables ***/\n    $: _buttonStyle = (width ? \"width: \"+width+\"; \" : \"\") +\n                      (height ? \"height: \"+height+\"; \" : \"\") +\n                       style\n</script>\n","<section >\n\t<label for=\"dim\">Board length</label>\n\t<input id=\"dim\" title=\"between {dimMin} and {dimMax}!\"\n\t\t   type=\"number\" min={dimMin} max={dimMax} bind:value={dimension}\n\t\t   on:keyup={keyEnter} on:change={checkDimension}/>\n\t<Button name=\"Create Board\" width={buttonWidth} style=\"margin-right: .7em;\"\n\t\t\ton:click={createBoard}/>\n\t<Button name=\"Clear Board\" width={buttonWidth}\n\t\t\ton:click={clearBoard}/>\n</section>\n\n<style>\n\tsection { height: 4em; }\n\tinput { width: 6em; margin-right: 3.1em; text-align: right; }\n</style>\n\n<script>\n\timport { createEventDispatcher, onMount } from 'svelte'\n\timport { setFocus, checkMinMax } from './common/Util.html'\n\timport Button from './common/Button.html'\n\n\t/*** Default Component Interface ***/\n\texport let defDimension = 12, dimMin = 1, dimMax = 1000\n\tlet dimension = defDimension\n\tconst buttonWidth = \"13.8em\"\n\n\t/*** Events ***/\n\tconst\n\t\tkeyEnter = (ev, key=ev.which) => key === 13 && createBoard(),\n\t\tcheckDimension = (ev, dim = ev.target.value) =>\n\t\t\tvoid( dimension = checkMinMax(dim, dimMin, dimMax) ),\n\t\t//\n\t\tdispatch = createEventDispatcher(),\n\t\tevt = (action, focus) => ( setFocus(focus), dispatch(action, dimension) ),\n\t\tcreateBoard = () => evt(\"create\", \"next\"),\n\t\tclearBoard = () => evt(\"clear\", \"dim\")\n\t//\n\t// set the focus to the input element within the start of the page\n\tonMount( () => { setFocus('dim') } )\n</script>\n","<button class=\"{_colorState} {_colorCycle}\" on:click={flip}/>\n\n<style>\n    button {\n        width: 30px; height: 30px; border-width: 2px;\n        cursor: crosshair; margin: 2px; padding: 1px; }\n    .dead { background-color: lightgrey; }\n    .alive { background-color: aqua; }\n    .unchanged { border-color: white; }\n    .changed-dead { border-color: black; }\n    .changed-alive { border-color: blue; }\n</style>\n\n<script>\n    import { createEventDispatcher } from 'svelte'\n\n    /***  Default Component Interface ***/\n    export let index, state, changed\n\n    /*** Observables ***/\n    // background color based on state\n    $: _colorState = state ? \"alive\" : \"dead\"\n    // border color based on change\n    $: _colorCycle = changed ? \"changed-\"+_colorState : \"unchanged\"\n\n    /*** Events ***/\n    const\n        dispatch = createEventDispatcher(),\n        flip = () => dispatch( \"flip\", index )\n</script>\n\n<script context=\"module\">\n    /*** field states ***/\n    export const fState = { alive: 1, dead: 0 }\n    //\n    export const createField = (_pos=0) => {\n        const index = _pos\n        let _state = fState.dead, _prevState = null\n        //\n        const\n            hasChanged = () => _state^_prevState,\n            hasState = state => _state === state,\n            //\n            _set = (state=fState.dead, prevState=state) =>\n                void( _state = state, _prevState = prevState ),\n            _changeTo = state => _set(state, _state)\n        //\n        // Component Interface\n        return {\n            //\n            // static getters\n            index,\n            //\n            // dynamic getters\n            state: () => _state,\n            hasState,\n            hasChanged,\n            hasChangedState: (state) => hasState(state) && hasChanged(),\n            //\n            // setters\n            setState: state => _changeTo(state),\n            setEmpty: () => _set(),\n            setRandom: () => _set(Math.round(Math.random())),\n            flip: () => _changeTo(+!_state)\n        }\n    }\n</script>\n","<div {style}><span>{title}:</span>\n             <span class=right>{blank(diff)}</span></div>\n\n<style>\n    .right { float: right; }\n</style>\n\n<script>\n    import { blank } from './Util.html'\n    /*** Default Component Interface ***/\n    export let title, diff, style = \"\", mClass\n</script>\n\n<script context=\"module\">\n    export const createMeasure = _title => {\n        let _m1, _m2\n        //\n        const\n            title = _title,\n            _now = () => window.performance.now(),\n            start = () => void ( _m1 = _now() ),\n            stop = () => void ( _m2 = _now() ),\n            diff = () => Math.floor( (_m2 - _m1) * 1000 )/1000\n        //\n        /*** Component Interface ***/\n        return {\n            // static getter\n            title,\n            // dynamic getter\n            diff,\n            // setters\n            start,\n            stop: () => ( stop(), diff() )\n        }\n    }\n</script>\n","<section>\n\t<article class=show>\n\t\t<Measure style={__total} title=\"Total\" diff={blank(_birth + _death)}/>\n\t\t<hr/>\n\t\t<Measure style={__birth} title=\"Birth\" diff={blank(_birth)}/>\n\t\t<Measure style={__death} title=\"Death\" diff={blank(_death)}/>\n\t</article>\n\t<article id=generation>\n\t\t<Button id=\"next\" name={_showName} width=\"10em\" height=\"5em\"\n\t\t\t\tstyle=\"cursor: copy;\"\n\t\t\t\tdisabled={!_nextEnabled} on:click/>\n\t</article>\n\t<article class=show>\n\t\t<Measure style={__total} title=\"Total\" diff={blank(_alive + _dead)}/>\n\t\t<hr/>\n\t\t<Measure style={__alive} title=\"Alive\" diff={blank(_alive)}/>\n\t\t<Measure style={__dead} title=\"Dead\" diff={blank(_dead)}/>\n\t</article>\n    <article class=show>\n\t\t<div id=time>Time (ms)</div>\n\t\t<hr/>\n\t\t<Measure title={calc.title} diff={_timeCalc}/>\n\t\t<Measure title={showTitle} diff={showDiff}/>\n\t</article>\n</section>\n\n<style>\n    section { min-height: 5.5em; margin-top: 1.5em; }\n    article { float: left; width: 8em; margin-right: .8em; }\n\tarticle#generation { width: auto; }\n    .show { border: 1px solid darkgrey; padding: .2em; }\n    .right { float: right; }\n    div#time { font-style: italic; }\n</style>\n\n<script>\n    import { counter, blank } from './common/Util.html'\n    import { fState } from './Field.html'\n\timport Button from './common/Button.html'\n\timport Measure from './common/Measure.html'\n\n    /*** Default Component Interface ***/\n    export let status, calc, showTitle, showDiff\n\n\t/*** measure styles ***/\n\tconst\n\t\t__total = \"font-weight: 900;\",\n\t\t__birth = \"color: blue;\",\n\t\t__death = \"color: black;\",\n\t\t__alive = \"background-color: aqua;\",\n\t\t__dead = \"background-color: lightgrey;\"\n\n    /*** Observables ***/\n    let _alive, _dead, _birth, _death,\n        _timeCalc, _showgen=\"-\", _nextEnabled\n    $: {\n        status && (\n            _alive = status.countState(fState.alive),\n            _dead = status.size - _alive,\n            _birth = status.countChangedState(fState.alive),\n            _death = status.countChangedState(fState.dead),\n            _timeCalc = calc.diff(),\n            _showgen = (status.generation === \"\") ? \"-\" : status.generation,\n\t\t\t_showName = \"+ Generation (\" + _showgen + \")\",\n            _nextEnabled = status.isReady || _birth || _death )\n        }\n\t$: _showName = \"+ Generation (\" + _showgen + \")\"\n</script>\n","<section>\n\t<table>\n    {#each rows as row}\n\t\t<tr>\n\t\t{#each row as field}\n\t\t\t<td><Field index={field.index} state={field.state()}\n\t\t\t\t\t   changed={field.hasChanged()} on:flip/></td>\n\t\t{/each}\n\t\t</tr>\n\t{:else}\n\t<article><h3>Use\n\t\t<ul><li>{\"<Board length>\"} to define the size of the board (length x length).\n\t\t\t<li>{\"<Create Board>\"} to display a randomly setup board.\n\t\t\t<li>{\"<Clear Board>\"} to setup an empty board.\n\t\tYou may create your own game by clicking on any cell to flip its state.\n\t\t<li>{\"<+ Generation>\"} to trigger the next generation.</ul></h3></article>\n\t{/each}\n\t</table>\n</section>\n\n<style>\n    table {\n        margin: 1em 0; border: 1px solid grey;\n        border-collapse: collapse; border-spacing: 0; }\n\tarticle { margin: 1em; }\n\tli { margin-bottom: 1em; }\n</style>\n\n<script>\n\timport { createEventDispatcher, beforeUpdate, afterUpdate } from 'svelte'\n\timport Field from './Field.html'\n\n    /*** Default Component Interface ***/\n    export let rows\n\n\t/*** events ***/\n\tconst dispatch = createEventDispatcher()\n\tbeforeUpdate( () => dispatch('measure') )\n\tafterUpdate( () => dispatch('unmeasure') )\n</script>\n\n<script context=\"module\">\n    import { counter, call } from './common/Util.html'\n    import { createField, fState } from './Field.html'\n\n\texport const createBoard = (_dimension=0, __measure=null) => {\n\t\tlet generation\n\t\t\t//\n\t\tconst\n\t\t\tdimension = _dimension,\n\t\t\t_measure = __measure,\n\t\t\t_fields = Array.from(\n\t\t\t\t\t{ length: dimension**2 },\n\t\t\t\t\t(_, idx) => createField(idx) ),\n\t\t\t_row = _index => Math.floor(_index/dimension),\n\t\t\t_col = _index => _index%dimension,\n\t\t\trows = _fields.reduce( (acc, field) =>\n\t\t\t\t// works because _col always starts at zero!\n\t\t\t\t( _col(field.index)\n\t\t\t\t\t? acc[acc.length-1].push(field)\n\t\t\t\t\t: acc.push([field]),\n\t\t\t\t  acc ), [] ),\n\t\t\t//\n\t\t\t_getField = index => _fields[index],\n\t\t\t_doMeasure = (action, ...arg) => void(\n\t\t\t\t_measure && _measure.start(),\n\t\t\t\taction(...arg),\n\t\t\t\t_measure && _measure.stop() ),\n\t\t\t//\n\t\t\t_flip = index => void(\n\t\t\t\t_getField(index).flip(),\n\t\t\t\tgeneration = +generation ),\n\t\t\t//\n\t\t\t_fill = (action, _generation=\"\") => void(\n\t\t\t\t_fields.map( call(action) ),\n\t\t\t\tgeneration = _generation ),\n\t\t\t//\n\t\t\t_next = (newStates=null, state=null, index=null) => void(\n\t            newStates = _fields.reduce(\n\t\t\t\t\t(acc, field) => (\n\t\t\t\t\tstate = field.state(), index = field.index,\n\t                acc.push( _nextState(state,\n\t\t\t\t\t\t\t  _countAlive(state, _row(index), _col(index))) )\n\t\t\t\t\t, acc ), [] ),\n\t            //\n\t            _fields.map( (field, idx) =>\n\t\t\t\t\tfield.setState(newStates[idx]) ),\n\t            //\n\t\t\t\tgeneration = ++generation ),\n\t\t\t//\n\t\t\t_nextState = (state, count) =>\n\t\t\t \t+( (count === 3) || (count === 2) && state ),\n\t\t\t//\n\t\t\t_countAlive = (state, row, col) =>\n\t\t\t\tcounter(matrix, _countLife(row, col)) - state,\n\t\t\t//\n\t\t\t_countLife = (row, col) => (count, mx) =>\n\t\t\t\tcount += _validCount(mx, row, col),\n\t\t\t//\n\t\t\t_validCount = (mx, r/*ow*/, c/*ol*/) => +(\n\t\t\t\t[r, c] = [ r+mx[0], c+mx[1] ],\n\t\t\t\t(r>=0) && (r<dimension) && (c>=0) && (c<dimension)\n\t\t\t\t\t   && _getField(r* dimension +c).state() ),\n\t\t\t//\n\t\t\t_count = (attr, state) =>\n\t\t\t\tcounter(_fields, (acc, field) =>\n\t\t\t\t\tacc += field[attr](state))\n\t\t//\n\t\t/*** Component Interface ***/\n\t\treturn {\n\t\t\t//\n\t\t\t// static getters\n\t\t\tdimension,\n\t\t\trows,\n\t\t\tsize: dimension**2,\n\t\t\t//\n\t\t\t// dynamic getters\n\t\t\tgeneration: () => generation,\n\t\t\tisReady: () => generation === 0,\n\t\t\tcountState: (state) => _count(\"hasState\", state),\n\t\t\tcountChangedState: (state) => _count(\"hasChangedState\", state),\n\t\t\t//\n\t\t\t// setters\n\t\t\tclear: () => _doMeasure(_fill, \"setEmpty\"),\n\t\t\tcreate: () => _doMeasure(_fill, \"setRandom\", 0),\n\t\t\tnext: () => _doMeasure(_next),\n\t\t\tflip: (index) => _doMeasure(_flip, index)\n\t\t}\n\t}\n\t//\n\t/*** Neighborhood ***/\n\tconst\n\t\t_base = [ -1, 0, 1 ],\n\t\tmatrix = Array.from( _base,\n\t\t\t\t\tx => Array.from( _base,\n\t\t\t\t\t\ty => [x, y] ) ).flat()\n\n</script>\n","<!--\n\tWeb App to simulate\n\t---------------------\n\tConway's Game of Life\n\t(see https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life)\n\t---------------------\n\tby jean-claude@schmidig.email\n-->\n<header>\n\t<h1><a href=\"https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life\"\n\t\t   target=_blank>Conways's Game of Life</a></h1></header>\n<Start {defDimension} {dimMin} {dimMax}\n\t   on:clear={clear} on:create={create}/>\n<hr/>\n<Game {status} {calc} showTitle={show.title} {showDiff}\n\t  on:click={next}/>\n<hr/>\n<Board {rows} on:flip={flip}\n\t   on:measure={measureRun} on:unmeasure={measureStop}/>\n\n<script>\n    import Start from './Start.html'\n    import Game from './Game.html'\n    import Board, { createBoard } from './Board.html'\n\timport { createMeasure } from './common/Measure.html'\n\t//\n\tlet board, rows = [], status, showDiff\n\tconst\n\t\t[ defDimension, dimMin, dimMax ] =\n\t\t\t[ 15, 3, Math.floor(Math.sqrt(100000)) ],\n\t\tcalc = createMeasure(\"Calc\"),\n\t\tshow = createMeasure(\"Display\")\n\n\t/*** Observables ***/\n\t$:  if (board) {\n\t\t\trows = board.rows\n\t\t\tstatus = {\n\t\t\t\tsize: board.size,\n\t\t\t\tgeneration: board.generation(),\n\t\t\t\tisReady: board.isReady(),\n\t\t\t\tcountState: board.countState,\n\t\t\t\tcountChangedState: board.countChangedState\n\t\t\t}\n\t\t}\n\n\t/*** events ***/\n\tconst\n\t\tevt = (action, newBoard=false) =>\n\t\t\t(event, prop=event.detail, dim=prop) =>\n\t\t\t\t( board = newBoard && createBoard(dim, calc) || board )\n\t\t\t\t\t[action](prop),\n\t\t//\n\t\t// Issued by component Input\n\t\tclear = evt(\"clear\", true),\n\t\tcreate = evt(\"create\", true),\n\t\t// Issued by component Game\n\t    next = evt(\"next\"),\n\t\t// Issued by component Field\n\t    flip = evt(\"flip\"),\n\t\t// Issued by component Board\n\t\tmeasureRun = () => show.start(),\n\t\tmeasureStop = () => showDiff = show.stop()\n</script>\n","import App from './App.html';\n\nconst app = new App({\n\ttarget: document.body,\n});\n\nexport default app;\n"],"names":["noop","run","fn","blank_object","Object","create","run_all","fns","forEach","is_function","thing","safe_not_equal","a","b","append","target","node","appendChild","insert","anchor","insertBefore","detach","parentNode","removeChild","destroy_each","iterations","detaching","i","length","d","element","name","document","createElement","text","data","createTextNode","space","listen","event","handler","options","addEventListener","removeEventListener","attr","attribute","value","removeAttribute","setAttribute","set_data","set_input_value","input","current_component","set_current_component","component","get_current_component","Error","createEventDispatcher","type","detail","callbacks","$$","e","createEvent","initCustomEvent","custom_event","slice","call","bubble","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","Promise","resolve","update_scheduled","schedule_update","then","flush","add_render_callback","push","seen_callbacks","Set","shift","update","pop","callback","has","add","fragment","dirty","before_update","p","ctx","after_update","outroing","outros","group_outros","r","c","check_outros","transition_in","block","local","delete","transition_out","o","mount_component","on_mount","on_destroy","m","new_on_destroy","map","filter","destroy_component","init","instance","create_fragment","not_equal","prop_names","parent_component","props","bound","context","Map","ready","key","make_dirty","hydrate","l","Array","from","childNodes","intro","SvelteComponent","[object Object]","this","$destroy","index","indexOf","splice","counter","obj","reducer","reduce","setFocus","async","getElementById","focus","blank","checkMinMax","min","max","valueMin","valueMax","id","_buttonStyle","disabled","width","height","style","buttonWidth","createBoard","clearBoard","dimMin","dimMax","keyEnter","checkDimension","dimension","defDimension","dispatch","evt","action","ev","which","dim","undefined","_colorState","_colorCycle","flip","fState","alive","dead","state","changed","diff","title","createMeasure","_title","_m1","_m2","_now","window","performance","now","Math","floor","start","stop","mClass","__total","_birth","_death","__birth","__death","_showName","_nextEnabled","_alive","_dead","__alive","__dead","calc","_timeCalc","showTitle","showDiff","status","_showgen","countState","size","countChangedState","generation","isReady","field","hasChanged","row","rows","_dimension","__measure","_measure","_fields","_","idx","_pos","_state","_prevState","hasState","_set","prevState","_changeTo","hasChangedState","setState","setEmpty","setRandom","round","random","createField","_col","_index","acc","_getField","_doMeasure","arg","_flip","_fill","_generation","verb","prop","_next","newStates","_nextState","_countAlive","_row","count","col","matrix","_countLife","mx","_validCount","_count","clear","next","_base","x","y","flat","afterUpdate","show","measureRun","measureStop","board","sqrt","newBoard","body"],"mappings":"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"}